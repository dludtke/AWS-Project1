AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy EC2 instances and ALB for Project 2
#Parameters:
#  NetworkStackName:
#    Type: String
#    Description: Name of the network stack as shared from the parent
#  PrivateSubnet1:
#    Type: String
Resources:
  WebServerInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-07eb8c4d4db8d4cb1"
      InstanceType: t2.micro
      KeyName: "project1"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue: "$PrivateSubnet1"
          GroupSet:
            - Fn::ImportValue: "$WebInstanceSecurityGroup"
                #Fn::Sub: "${NetworkStackName}-WebInstanceSecurityGroup"
  WebServerInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-07eb8c4d4db8d4cb1"
      InstanceType: t2.micro
      KeyName: "project1"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue: "$PrivateSubnet2"
              #Fn::Sub: "${NetworkStackName}-PrivateSubnet2"
          GroupSet:
            - Fn::ImportValue: "$WebInstanceSecurityGroup"
                #Fn::Sub: "${NetworkStackName}-WebInstanceSecurityGroup"
  
  BastionHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-07eb8c4d4db8d4cb1"
      InstanceType: t2.micro
      KeyName: "project1"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue: "$PublicSubnet2"
              #Fn::Sub: "${NetworkStackName}-PublicSubnet2"
          GroupSet:
            - Fn::ImportValue: "$BastionHostSecurityGroup"
                #Fn::Sub: "${NetworkStackName}-BastionHostSecurityGroup"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - Fn::ImportValue: "$ALBSecurityGroup"
            #Fn::Sub: "${NetworkStackName}-ALBSecurityGroup"
      Subnets:
        - Fn::ImportValue: "$PublicSubnet1"
            #Fn::Sub: "${NetworkStackName}-PublicSubnet1"
        - Fn::ImportValue: "$PublicSubnet2"
            #Fn::Sub: "${NetworkStackName}-PublicSubnet2"
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALBTargetGroup
      Targets:
        - Id: !Ref WebServerInstance1
        - Id: !Ref WebServerInstance2
      TargetType: instance
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue: "$VPC"
          #Fn::Sub: "${NetworkStackName}-VPC"
Outputs:
  ApplicationLoadBalancer:
    Description: DNS Address
    Value: !GetAtt
    - ApplicationLoadBalancer
    - DNSName